// src/pages/GuidancePage.js
import React, { useEffect, useState } from "react";
import { collection, getDocs } from "firebase/firestore";
import { db } from "../firebase";
import BackToDashboardButton from "../components/BackToDashboardButton";

// ðŸ”’ Helper function to clean strings of invalid characters
const sanitize = (str) => {
  if (typeof str !== "string") return "";
  try {
    return str.replace(/[\u0000-\u001F\u007F]/g, "").trim();
  } catch {
    return "";
  }
};

const GuidancePage = () => {
  const [guidanceDocs, setGuidanceDocs] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchGuidance = async () => {
      try {
        const snapshot = await getDocs(collection(db, "guidance"));
        const docsData = snapshot.docs.map((doc) => {
          const data = doc.data();
          const cleanDoc = {
            id: doc.id || `doc-${Math.random().toString(36).substring(2, 8)}`,
            title: sanitize(data?.title || "Untitled Document"),
            description: sanitize(
              data?.description || "No description provided."
            ),
            pdfUrl: sanitize(data?.pdfUrl || ""),
          };
          return cleanDoc;
        });

        console.log("Fetched guidance docs:", docsData); // âœ… Debug
        setGuidanceDocs(Array.isArray(docsData) ? docsData : []);
      } catch (err) {
        console.error("Error fetching guidance docs:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchGuidance();
  }, []);

  if (loading) {
    return <div className="p-6">Loading Guidance Notes...</div>;
  }

  return (
    <div className="p-6">
      <BackToDashboardButton />
      <h1 className="text-3xl font-bold text-blue-700 mb-4">Guidance Notes</h1>

      {!Array.isArray(guidanceDocs) || guidanceDocs.length === 0 ? (
        <p>No guidance documents found.</p>
      ) : (
        <ul className="space-y-4">
          {guidanceDocs.map((doc, index) => (
            <li key={doc.id || index} className="bg-white p-4 rounded shadow">
              <h2 className="text-xl font-semibold text-blue-800 mb-1">
                {doc.title}
              </h2>
              <p className="text-sm text-gray-600 mb-2">{doc.description}</p>

              {doc.pdfUrl && doc.pdfUrl.startsWith("https://") && (
                <a
                  href={doc.pdfUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-blue-600 hover:underline text-sm"
                >
                  View PDF
                </a>
              )}
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default GuidancePage;
